<div class="modal-wrapper" id="add-user-modal">
    <div class="modal">
        <a href="#" onclick="closeModal()" class="modal-close">+</a>
        <div class="modal-title">
            <h2>Create New User</h2>
        </div>
        <div class="modal-body">
            <form id="add-user-form" method="POST" action="/users" enctype="multipart/form-data">
                <input type="text" placeholder="enter name" name="name" />
                <p class="error show">This is error</p>
                <input type="text" placeholder="enter email" name="email" />
                <input type="text" placeholder="enter mobile" name="mobile" />
                <input type="password" placeholder="enter password" name="password" />
                <input type="file" name="avatar" />
                <input type="submit" value="Submit" />
            </form>
        </div>
    </div>
</div>
<script>
    const modal = document.querySelector("#add-user-modal");
    const form = document.querySelector("#add-user-form")
    
    // success toast
    const successToast = Toastify({
        text: "we're added successfully, reloading the list...",
        duration: 1000
    })

    function closeModal() {
        modal.style.display = "none";
    }
    function openModal() {
        modal.style.display = "block";
    }

    form.onSubmit = async function (event) {
        event.preventDefault()

        // clear error first 
        const errorPlaceholders = document.querySelectorAll("p.error")
        for (let i = 0; i < errorPlaceholders.length; i++) {
            errorPlaceholders[i].style.display = "none"
        }
        const inputErrors = document.querySelectorAll("input.error")
        if(inputErrors.length>0){
            for (let j = 0; j < inputErrors.length; j++) {
                inputErrors[j].classList.remove("error")
                
            }
        }

        // prepare the form data 
        const formData = new FormData(form)

        // send the request to server
        let response = await fetch("/users", {
            method: "POST",
            body: formData
        })
        // get response
        let result = await response.json()
        // handle error and response
        if(result.errors){
            //error
            Object.keys(result.errors).forEach((fieldName)=>{
                // add error class to all inputs
                form[fieldName].classList.add("error")
                // set all error placeholder (p tag) text content
                const errorPlaceholder = document.querySelector(`.${fieldName}-error`)
                errorPlaceholder.textContent = result.errors[fieldName].msg
                // make all placeholders visible
                errorPlaceholder.style.display="block";
            })
        }else{
            // success
         successToast.showToast()   
         closeModal()
         document.querySelector("p.error").style.display = "none"

         // reload the page after 1sec
         setTimeout(() => {
            location.reload()
         }, 1000);
        }
    }

</script>